@inject IJSRuntime JsRuntime;
@inject Aurora.Devices.Layout.GlobalDeviceLayout deviceLayout

<div class="virtual-layout" @onmouseout="OnMouseOut">
    <div id="virtual-region">
        @foreach (Aurora.Devices.Layout.DeviceLayout device in deviceLayout.AllLayouts)
        {
            <div @onmouseover="DeviceOnMouseOver" @onmouseout="DeviceOnMouseOut" @onmousedown="DeviceOnMouseDown">
                <DeviceLayout Device="@device" @bind-EditMode="@EditMode" />
            </div>
        }
    </div>

    <ToggleButton IconRight="ruler-square" Class="virtual-layout-edit-button" @bind-Checked="EditMode" />
</div>


@code {

    [Parameter]
    public bool EditMode { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<object>("attachPanZoom", "#virtual-region");
        }
    }

    void OnMouseOut(MouseEventArgs e)
    {

    }

    async Task DeviceOnMouseDown(MouseEventArgs e)
    {

    }

    async Task DeviceOnMouseOver(MouseEventArgs e)
    {
        await JsRuntime.InvokeAsync<object>("pausePanZoom");
    }

    async Task DeviceOnMouseOut(MouseEventArgs e)
    {
        await JsRuntime.InvokeAsync<object>("resumePanZoom");

    }

    void ItemOnAppearingHandler(ItemAppearingEventArgs e)
    {
        GlobalDeviceLayout layout = (GlobalDeviceLayout)e.ContextMenuTrigger.Data;

        switch (e.MenuItem.Id)
        {
            case "menuitem-edit":
                e.IsVisible = !layout.EditMode;
                break;
            case "menuitem-stopedit":
                e.IsVisible = layout.EditMode;
                break;
        }
    }

    void ItemClick(ItemClickEventArgs e)
    {
        GlobalDeviceLayout layout = (GlobalDeviceLayout)e.ContextMenuTrigger.Data;

        switch (e.MenuItem.Id)
        {
            case "menuitem-edit":
                layout.EditMode = true;
                break;
            case "menuitem-stopedit":
                layout.EditMode = false;
                break;
        }
    }
}
